//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoyalCode.SmartProblems.Descriptions {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DR {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DR() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("RoyalCode.SmartProblems.Descriptions.DR", typeof(DR).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to See HTTP Status Code.
        /// </summary>
        internal static string AboutBlankTitle {
            get {
                return ResourceManager.GetString("AboutBlankTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiples problems.
        /// </summary>
        internal static string AggregateMessage {
            get {
                return ResourceManager.GetString("AggregateMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type of problem describes that there were several problems, and they are of different types. An additional property, called &apos;inner-problems&apos; will contain the various problems..
        /// </summary>
        internal static string AggregateProblemsDetailsDescription {
            get {
                return ResourceManager.GetString("AggregateProblemsDetailsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiples problems.
        /// </summary>
        internal static string AggregateProblemsDetailsTitle {
            get {
                return ResourceManager.GetString("AggregateProblemsDetailsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When one or more problems occur during the request (operation) in the system, generic or specific problems can be returned. Specific problems define their own types for ProblemDetails and it is necessary to include a description for these specific types. When descriptions are not provided or found, this type, also generic, is used to describe the specific problem..
        /// </summary>
        internal static string CustomProblemDescription {
            get {
                return ResourceManager.GetString("CustomProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error has occurred.
        /// </summary>
        internal static string DefaultMessage {
            get {
                return ResourceManager.GetString("DefaultMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected error has occurred.
        /// </summary>
        internal static string InternalErrorMessage {
            get {
                return ResourceManager.GetString("InternalErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The 500 (Internal Server Error) status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request..
        /// </summary>
        internal static string InternalServerErrorDescription {
            get {
                return ResourceManager.GetString("InternalServerErrorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The 400 (Bad Request) status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error. This particular error occurs because the parameters sent in by the client are invalid..
        /// </summary>
        internal static string InvalidParameterDescription {
            get {
                return ResourceManager.GetString("InvalidParameterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input parameters are invalid.
        /// </summary>
        internal static string InvalidParametersMessage {
            get {
                return ResourceManager.GetString("InvalidParametersMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The 409 (Conflict) status code indicates that the request could not be completed due to a conflict with the current state of the target resource. This code is used in situations where the user might be able to resolve the conflict and resubmit the request..
        /// </summary>
        internal static string InvalidStateDescription {
            get {
                return ResourceManager.GetString("InvalidStateDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid operation, the current state of the data does not allow the operation to be performed.
        /// </summary>
        internal static string InvalidStateMessage {
            get {
                return ResourceManager.GetString("InvalidStateMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The 403 (Forbidden) status code indicates that the server understood the request but refuses to fulfill it. A server that wishes to make public why the request has been forbidden can describe that reason in the response content (if any)..
        /// </summary>
        internal static string NotAllowedDescription {
            get {
                return ResourceManager.GetString("NotAllowedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Execution was not allowed.
        /// </summary>
        internal static string NotAllowedMessage {
            get {
                return ResourceManager.GetString("NotAllowedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists..
        /// </summary>
        internal static string NotFoundDescription {
            get {
                return ResourceManager.GetString("NotFoundDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required data (registry) was not found.
        /// </summary>
        internal static string NotFoundMessage {
            get {
                return ResourceManager.GetString("NotFoundMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to deserialize a collection of ProblemDetailsDescription, type &apos;{0}&apos;, message: {1}, JSON:\n{2}.
        /// </summary>
        internal static string ProblemDetailsExceptionMessagePattern {
            get {
                return ResourceManager.GetString("ProblemDetailsExceptionMessagePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The 422 (Unprocessable Content) status code indicates that the server understands the content type of the request content (hence a 415 (Unsupported Media Type) status code is inappropriate), and the syntax of the request content is correct, but it was unable to process the contained instructions. For example, this status code can be sent if an XML request content contains well-formed (i.e., syntactically correct), but semantically erroneous XML instructions..
        /// </summary>
        internal static string ValidationFailedDescription {
            get {
                return ResourceManager.GetString("ValidationFailedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Errors occurred in the validation of input parameters.
        /// </summary>
        internal static string ValidationFailedMessage {
            get {
                return ResourceManager.GetString("ValidationFailedMessage", resourceCulture);
            }
        }
    }
}
